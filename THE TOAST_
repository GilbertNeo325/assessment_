Step 1: Employees Model with Validation

using System.ComponentModel.DataAnnotations;

namespace SeesaAssessment.Models
{
    public class Employee
    {
        public int EmployeeID { get; set; }

        [Required(ErrorMessage = "First Name is required")]
        [StringLength(50)]
        public string FirstName { get; set; } = null!;

        [Required(ErrorMessage = "Last Name is required")]
        [StringLength(50)]
        public string LastName { get; set; } = null!;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = null!;

        [Required(ErrorMessage = "Department ID is required")]
        public int DepartmentID { get; set; }

        public DateTime HireDate { get; set; } = DateTime.Now;
    }
}







Step 2: Employees API Controller (Controllers/EmployeesController.cs)

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SeesaAssessment.Data;
using SeesaAssessment.Models;

namespace SeesaAssessment.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeesController : ControllerBase
    {
        private readonly SeesaDbContext _context;

        public EmployeesController(SeesaDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Employee>>> GetEmployees()
        {
            return await _context.Employees.ToListAsync();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Employee>> GetEmployee(int id)
        {
            var employee = await _context.Employees.FindAsync(id);
            if (employee == null) return NotFound();
            return employee;
        }

        [HttpPost]
        public async Task<ActionResult<Employee>> PostEmployee(Employee employee)
        {
            _context.Employees.Add(employee);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetEmployee), new { id = employee.EmployeeID }, employee);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutEmployee(int id, Employee employee)
        {
            if (id != employee.EmployeeID) return BadRequest();

            _context.Entry(employee).State = EntityState.Modified;
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Employees.Any(e => e.EmployeeID == id))
                    return NotFound();
                else throw;
            }

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteEmployee(int id)
        {
            var employee = await _context.Employees.FindAsync(id);
            if (employee == null) return NotFound();

            _context.Employees.Remove(employee);
            await _context.SaveChangesAsync();

            return NoContent();
        }
    }
}





Step 3: Employees HttpClient Service (Services/EmployeeService.cs)

using System.Net.Http.Json;
using SeesaAssessment.Models;

namespace SeesaAssessment.Services
{
    public class EmployeeService
    {
        private readonly HttpClient _http;

        public EmployeeService(HttpClient http)
        {
            _http = http;
        }

        public async Task<List<Employee>> GetEmployeesAsync() =>
            await _http.GetFromJsonAsync<List<Employee>>("api/employees") ?? new List<Employee>();

        public async Task<Employee?> GetEmployeeByIdAsync(int id) =>
            await _http.GetFromJsonAsync<Employee>($"api/employees/{id}");

        public async Task<bool> CreateEmployeeAsync(Employee employee)
        {
            var response = await _http.PostAsJsonAsync("api/employees", employee);
            return response.IsSuccessStatusCode;
        }

        public async Task<bool> UpdateEmployeeAsync(Employee employee)
        {
            var response = await _http.PutAsJsonAsync($"api/employees/{employee.EmployeeID}", employee);
            return response.IsSuccessStatusCode;
        }

        public async Task<bool> DeleteEmployeeAsync(int id)
        {
            var response = await _http.DeleteAsync($"api/employees/{id}");
            return response.IsSuccessStatusCode;
        }
    }
}




Add to Program.cs:

builder.Services.AddScoped<EmployeeService>();




Step 4: Blazor CRUD Pages for Employees
1. List Employees — Pages/Employees.razor

@page "/employees"
@inject EmployeeService EmployeeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Employees</h3>

<button class="btn btn-primary mb-3" @onclick="() => Navigation.NavigateTo("/employees/add")">Add Employee</button>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else if (!employees.Any())
{
    <p>No employees found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Department ID</th>
                <th>Hire Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in employees)
            {
                <tr>
                    <td>@emp.FirstName</td>
                    <td>@emp.LastName</td>
                    <td>@emp.Email</td>
                    <td>@emp.DepartmentID</td>
                    <td>@emp.HireDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info me-2" @onclick="() => Navigation.NavigateTo($"/employees/edit/{emp.EmployeeID}")">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(emp.EmployeeID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private async Task DeleteEmployee(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");
        if (confirmed)
        {
            await EmployeeService.DeleteEmployeeAsync(id);
            employees = await EmployeeService.GetEmployeesAsync();
            StateHasChanged();
        }
    }
}





2. Add Employee — Pages/EmployeesAdd.razor

@page "/employees/add"
@inject EmployeeService EmployeeService
@inject NavigationManager Navigation

<h3>Add Employee</h3>

<EditForm Model="newEmployee" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>First Name</label>
        <InputText @bind-Value="newEmployee.FirstName" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Last Name</label>
        <InputText @bind-Value="newEmployee.LastName" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="newEmployee.Email" type="email" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Department ID</label>
        <InputNumber @bind-Value="newEmployee.DepartmentID" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Hire Date</label>
        <InputDate @bind-Value="newEmployee.HireDate" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="() => Navigation.NavigateTo("/employees")">Cancel</button>
</EditForm>

@code {
    private Employee newEmployee = new();

    private async Task HandleValidSubmit()
    {
        await EmployeeService.CreateEmployeeAsync(newEmployee);
        Navigation.NavigateTo("/employees");
    }
}




3. Edit Employee — Pages/EmployeesEdit.razor

@page "/employees/edit/{EmployeeID:int}"
@inject EmployeeService EmployeeService
@inject NavigationManager Navigation

<h3>Edit Employee</h3>

@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>First Name</label>
            <InputText @bind-Value="employee.FirstName" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Last Name</label>
            <InputText @bind-Value="employee.LastName" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Email</label>
            <InputText @bind-Value="employee.Email" type="email" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Department ID</label>
            <InputNumber @bind-Value="employee.DepartmentID" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Hire Date</label>
            <InputDate @bind-Value="employee.HireDate" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="() => Navigation.NavigateTo("/employees")">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int EmployeeID { get; set; }

    private Employee? employee;

    protected override async Task OnInitializedAsync()
    {
        employee = await EmployeeService.GetEmployeeByIdAsync(EmployeeID);
    }

    private async Task HandleValidSubmit()
    {
        if (employee != null)
        {
            await EmployeeService.UpdateEmployeeAsync(employee);
            Navigation.NavigateTo("/employees");
        }
    }
}


Step 5: Add Navigation Links
Add these to your Shared/NavMenu.razor or wherever your navigation is:

<li class="nav-item px-3">
    <NavLink class="nav-link" href="employees" Match="NavLinkMatch.All">
        <span class="oi oi-people" aria-hidden="true"></span> Employees
    </NavLink>
</li>
                             

Summary
                              Employees model with validation
                              
                              API controller with full CRUD
                              
                              HttpClient service for API calls
                              
                              Blazor CRUD pages: list, add, edit with validation and delete with confirmation
                              
                              Navigation link added
                              
                              Would you like me to continue with Departments next, or help integrate error handling and UI feedback?



integrate error handling and UI feedback?

                        How to integrate error handling and UI feedback (e.g., toast notifications) in your Blazor app, focusing on:
                        
                        Handling API/service errors gracefully
                        
                        Showing user-friendly notifications (success, error, info)
                        
                        Keeping your UI responsive and informative

Step 1: Add a Toast Notification Component
Create a reusable toast notification component that shows messages dynamically.

Shared/Toast.razor

@inject IJSRuntime JSRuntime

@if (Visible)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1200;">
        <div class="toast show align-items-center text-bg-@BackgroundColor border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @Message
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideToast" aria-label="Close"></button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public string BackgroundColor { get; set; } = "primary"; // bootstrap bg colors
    [Parameter] public int Duration { get; set; } = 3000;

    private bool Visible { get; set; }

    public async Task ShowAsync(string message, string backgroundColor = "primary", int duration = 3000)
    {
        Message = message;
        BackgroundColor = backgroundColor;
        Duration = duration;
        Visible = true;
        StateHasChanged();
        await Task.Delay(Duration);
        HideToast();
    }

    private void HideToast()
    {
        Visible = false;
        StateHasChanged();
    }
}


Step 2: Add a Toast Service to Trigger Notifications Globally
Services/ToastService.cs


using System;
using System.Threading.Tasks;

namespace SeesaAssessment.Services
{
    public class ToastService
    {
        public event Func<string, string, int, Task>? OnShow;

        public Task ShowToast(string message, string type = "primary", int duration = 3000)
        {
            if (OnShow != null)
                return OnShow.Invoke(message, type, duration);
            return Task.CompletedTask;
        }
    }
}




Step 3: Modify Shared/Toast.razor to Use the ToastService
Change Toast.razor to subscribe to the toast service events and show messages accordingly.

@inject ToastService ToastService

@if (Visible)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1200;">
        <div class="toast show align-items-center text-bg-@BackgroundColor border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @Message
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideToast" aria-label="Close"></button>
            </div>
        </div>
    </div>
}

@code {
    private bool Visible { get; set; }
    private string Message { get; set; } = string.Empty;
    private string BackgroundColor { get; set; } = "primary";
    private int Duration { get; set; } = 3000;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private async Task ShowToast(string message, string backgroundColor, int duration)
    {
        Message = message;
        BackgroundColor = backgroundColor;
        Duration = duration;
        Visible = true;
        StateHasChanged();
        await Task.Delay(Duration);
        HideToast();
    }

    private void HideToast()
    {
        Visible = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
    }
}



Step 4: Register ToastService in Program.cs

builder.Services.AddScoped<ToastService>();


Step 5: Add Toast Component to MainLayout.razor
Inside your MainLayout.razor (or wherever your app layout is):

<Toast />
@Body



Step 6: Modify EmployeeService to Use Toast Notifications for Errors/Success
Update your EmployeeService to catch HTTP errors and notify users.

Example (inside EmployeeService.cs):

using System.Net.Http.Json;
using SeesaAssessment.Models;
using SeesaAssessment.Services;

public class EmployeeService
{
    private readonly HttpClient _http;
    private readonly ToastService _toast;

    public EmployeeService(HttpClient http, ToastService toast)
    {
        _http = http;
        _toast = toast;
    }

    public async Task<List<Employee>> GetEmployeesAsync()
    {
        try
        {
            return await _http.GetFromJsonAsync<List<Employee>>("api/employees") ?? new List<Employee>();
        }
        catch (Exception ex)
        {
            await _toast.ShowToast($"Error loading employees: {ex.Message}", "danger");
            return new List<Employee>();
        }
    }

    public async Task<bool> CreateEmployeeAsync(Employee employee)
    {
        try
        {
            var response = await _http.PostAsJsonAsync("api/employees", employee);
            if (response.IsSuccessStatusCode)
            {
                await _toast.ShowToast("Employee created successfully!", "success");
                return true;
            }
            else
            {
                await _toast.ShowToast($"Failed to create employee: {response.ReasonPhrase}", "danger");
                return false;
            }
        }
        catch (Exception ex)
        {
            await _toast.ShowToast($"Error: {ex.Message}", "danger");
            return false;
        }
    }

    // Similar changes for UpdateEmployeeAsync, DeleteEmployeeAsync...
}


Step 7: Modify Blazor Pages to Handle Service Results & Show Feedback
Example from EmployeesAdd.razor:

@code {
    private Employee newEmployee = new();

    private async Task HandleValidSubmit()
    {
        bool success = await EmployeeService.CreateEmployeeAsync(newEmployee);
        if (success)
        {
            Navigation.NavigateTo("/employees");
        }
        // Errors will show via toast automatically from service
    }
}
